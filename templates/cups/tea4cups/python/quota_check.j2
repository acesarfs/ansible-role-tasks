#!/usr/bin/python3

import datetime
import json
import os
import requests
import subprocess
import time
import traceback
import mysql.connector as database
from mysql.connector import Error

def set_log(err):
    log = "Banco de dados error: " + str(err)
    file_object = open("/tmp/tea4cups.log", "a+")
    file_object.write("\n" + str(log))
    file_object.close()

def get_latest_status(connection, printing_id):
    cursor = connection.cursor()
    query = "select latest_status from printings where id=%s"
    try:
        cursor.execute(query, (printing_id,))
        result = cursor.fetchone()
        if result is not None:
            for status in result:
                return status
        return result
    except Error as err:
        set_log(err)
        exit(-1)

try:
    connection = database.connect(
        user="{{ tasks_cups_quotas_username }}",
        password="{{ tasks_cups_quotas_password }}",
        host="{{ tasks_cups_quotas_host }}",
        database="{{ tasks_cups_quotas_database }}",
        autocommit=True
    )
except Error as err:
    set_log(err)
    exit(-1)

# temporário:
# Se a impressora não tem regra, imprimimos diretamente
# para evitar fazer muitas requisições HTTP
printers2ignorefile = open('/root/printers2ignore.json')
printers2ignore = json.load(printers2ignorefile)
printer = os.getenv('TEAPRINTERNAME')
if printer in printers2ignore:
    exit(0)

# Registrando model printing 
try:
    url = "{{ tasks_cups_quotas_endpoint }}/api/printings"
    api_key = "{{ tasks_cups_quotas_api_token }}"
    headers = {'Authorization': api_key}

    user = os.getenv('TEAUSERNAME')
    datafile = os.getenv('TEADATAFILE')
 
    #pages = subprocess.check_output(['/usr/bin/pkpgcounter', datafile])
    pages = subprocess.check_output(['/usr/local/bin/pkpgcounter', datafile])
 
    copies = os.getenv('TEACOPIES')
    printer = os.getenv('TEAPRINTERNAME')
    jobid = os.getenv('TEAJOBID')
    host = os.getenv('TEACLIENTHOST')
    filename = os.getenv('TEATITLE')
    filesize = os.getenv('TEAJOBSIZE')

    # hotfix: Após atualização do cups, TEACLIENTHOST passou a vir vazia
    # http://lists.pykota.com/pipermail/tea4cups/2013-September/000280.html
    # é necessário investigar como corrigir esse problema
    if host == '':
        host='143.107.72.189'

    body = {'user': user,
            'pages': int(pages),
            'copies': copies,
            'printer': printer,
            'jobid': jobid,
            'host': host,
            'filename': filename,
            'filesize': filesize
            }

    response = requests.post(url, headers=headers, data=body)

    # guardando o retorno no log
    file_object = open("/tmp/tea4cups.log", "a+")
    datetime = datetime.datetime.now()
    file_object.write("\n[{}]\n".format(datetime) + str(response.json()))
    file_object.close()

    status_code = response.status_code
    if status_code == 200:
        data = response.json()

        if data["latest_status"] == "sent_to_printer_queue":
            exit(0)

        printing_id = str(data["printing_id"])

        for i in range(120):
            time.sleep(1)

            latest_status = get_latest_status(connection, printing_id)

            if latest_status == "sent_to_printer_queue":
                exit(0)

            if latest_status in [ 'cancelled_not_authorized',  'cancelled_user_out_of_quota',  'cancelled_not_allowed']:
                exit(-1)
 
        body  = {"status": "cancelled_timeout"}
        requests.post(url + '/' + printer + '/' +  jobid, headers=headers, data=body)

        exit(-1)

    else:
        log = "Status code returned: " + str(status_code)
        file_object = open("/tmp/tea4cups.log", "a+")
        file_object.write("\n" + str(log))
        file_object.close()
        body  = {"status": "printer_problem"}
        requests.post(url + '/' + printer + '/' +  jobid, headers=headers, data=body)

        exit(-1)

    connection.close()
 
except Exception as err:
    log = traceback.format_exc()
    file_object = open("/tmp/tea4cups.log", "a+")
    datetime = datetime.datetime.now()
    file_object.write("\n[{}]\n".format(datetime) + str(log))
    file_object.close()

    body  = {"status": "printer_problem"}
    requests.post(url + '/' + printer + '/' +  jobid, headers=headers, data=body)

    exit(-1)
